    
def get_error(G, Y):
    error=0
    for i in xrange(len(G)):
        if G[i] != Y[i]:
            error += 1
    return 1.0 * error / len(G)


def demo(train,test):

    import os
    import sys
    import csv
    import numpy as np
    import matplotlib.pyplot as plt
    from sklearn import linear_model
    from sklearn import svm
    from sklearn import tree
    from sklearn import cross_validation
    from sklearn import linear_model
    from sklearn.cross_validation import cross_val_score
    from sklearn.ensemble import ExtraTreesClassifier
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.tree import DecisionTreeClassifier

    from sklearn.svm import SVC
    from sklearn.preprocessing import StandardScaler
    from sklearn.datasets import load_iris
    from sklearn.cross_validation import StratifiedKFold
    from sklearn.grid_search import GridSearchCV
    
    import pprint

    with open(train, 'rb') as csvfile:
        data=np.array(list(csv.reader(csvfile))).astype(int)
    with open(test, 'rb') as csvfile:
        data2=np.array(list(csv.reader(csvfile))).astype(int)
    
    num_dim= len(data[0])-2

    x_train = data[::, 1:-1]
    y_train = data[::, -1]
    x_test = data2[::, 1:]
    print y_train
    print 'data read'
    

    X, y = x_train, y_train
    Y=y


    #scaler = StandardScaler()

    #X = scaler.fit_transform(X)

    ###############################################################################
    ## Train classifier
    ##
    ## For an initial search, a logarithmic grid with basis
    ## 10 is often helpful. Using a basis of 2, a finer
    ## tuning can be achieved but at a much higher cost.

    #C_range = 10.0 ** np.arange(-2, 9)
    #gamma_range = 10.0 ** np.arange(-5, 4)
    #param_grid = dict(gamma=gamma_range, C=C_range)
    #cv = StratifiedKFold(y=Y, n_folds=3)
    #grid = GridSearchCV(SVC(), param_grid=param_grid, cv=cv)
    #grid.fit(X, Y)

    #print("The best classifier is: ", grid.best_estimator_)

    #sys.exit()




    #svc = svm.SVC(kernel='linear')
    #svc = svm.SVC(kernel='rbf',
    #        shrinking=False,
    #        C=10,
    #        gamma=.001,
    #        coef0=1)
    clf = svm.SVC(C=10.0, cache_size=200, class_weight=None, coef0=0.0, degree=3,
  gamma=0.001, kernel='poly', max_iter=-1, probability=False,
  random_state=None, shrinking=True, tol=0.001, verbose=False)

    #current winner
    #run svm over the sparse set
    for C in [.00001,.001,.1,10]:
        clf = linear_model.SGDClassifier(alpha=1, class_weight=None, epsilon=C, eta0=0.0,
               fit_intercept=False,l1_ratio=0.15, learning_rate='optimal',
               loss='hinge', n_iter=5, n_jobs=-1, penalty='l2', power_t=0.5,
               random_state=None, shuffle=False, verbose=0, warm_start=False)
        
        #best 90.19% crossvalidation score
        #clf = svm.LinearSVC(
        #        #loss='l1',
        #        #penalty='l1',
        #        #dual=False,
        #        fit_intercept=False,
        #        C=C)

        this_scores = cross_validation.cross_val_score(clf, X, y, n_jobs=-1)
        print 'C = ', C, 'score ', np.mean(this_scores)
    sys.exit()



    #C_s = np.logspace(-10, 0, 10)

    #scores = list()
    #scores_std = list()
    #for C in C_s:
    #    svc.C = C
    #    print C
    #    this_scores = cross_validation.cross_val_score(svc, X, y, n_jobs=-1)
    #    scores.append(np.mean(this_scores))
    #    scores_std.append(np.std(this_scores))

    ## Do the plotting
    #import matplotlib.pyplot as plt
    #plt.figure(1, figsize=(4, 3))
    #plt.clf()
    #plt.semilogx(C_s, scores)
    #plt.semilogx(C_s, np.array(scores) + np.array(scores_std), 'b--')
    #plt.semilogx(C_s, np.array(scores) - np.array(scores_std), 'b--')
    #locs, labels = plt.yticks()
    #plt.yticks(locs, list(map(lambda x: "%g" % x, locs)))
    #plt.ylabel('CV score')
    #plt.xlabel('Parameter C')
    #plt.ylim(0, 1.1)
    #plt.show()

    #sys.exit()
    
    #SVM implementaiton
    clf = svm.SVC(
            kernel='linear',
            C=.0001,
            shrinking=False,
            gamma=.01)

    for C in [10]:
        X1 = x_train
        results_to_num = y_train

        #clf = svm.LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,
        #intercept_scaling=1, loss='l2', multi_class='ovr', penalty='l2',
        #random_state=None, tol=C, verbose=0)
        
        #clf = linear_model.Lasso(alpha=C, copy_X=True, fit_intercept=True, max_iter=1000,
        #   normalize=False, positive=False, precompute='auto', tol=0.0001,
        #   warm_start=False)
        
        #clf = tree.DecisionTreeClassifier() #no winner even with 83 percent

        #86%
        #clf = tree.DecisionTreeRegressor(random_state=0)
        #cross_val_score(clf, X1, results_to_num, cv=10)

        #clf = ExtraTreesClassifier()
        #print 'fitting data 1'
        #x_new   = clf.fit(X1, y_train).transform(X1)
        #x_test2 = clf.fit(X1, y_train).transform(x_test)
        #print x_new[0]
        #print x_test[0]

        #print x_test2[0]
        #
        #
        #clf2 = ExtraTreesClassifier()
        #new   = clf2.fit(x_new, y_train)

        #X, y = x_train, y_train

        #clf = DecisionTreeClassifier(max_depth=None, min_samples_split=3,
        #    random_state=0)
        #scores = cross_val_score(clf, X, y)
        #print scores.mean()                             
        
        #clf = ExtraTreesClassifier(n_estimators=30, max_depth=None,
        #    min_samples_split=C, random_state=0)
        #scores = cross_val_score(clf, X, y)
        #print scores.mean()

        #clf = RandomForestClassifier(n_estimators=30, max_depth=None,
        #    min_samples_split=C, random_state=0)
        #scores = cross_val_score(clf, X, y)
        #print scores.mean()                             
        

        print 'fitting data 1'
        clf.fit(X, Y)

        print 'predicting results'
        G_train = clf.predict(x_train)
        G_test = clf.predict(x_test)

        train_error = get_error(G_train, y_train)
        print 'train_error ', train_error

        tally = 0
        f = open("output_best_crossval.csv", "w")
        f.write('Id,Prediction\n')
        for i in xrange(len(x_test)):
            if G_test[i]<=0: tally+=1
            f.write('%s,'% (i+1))
            f.write('%s\n'% G_test[i])
        f.close()
        print 'full classified ', tally/float(len(x_test)), '% as non-recession for C=', C

        


        
        #clf = svm.SVC(C=1.0, #rbf mol
        #          cache_size=200,
        #          class_weight=None,
        #          coef0=0.0,
        #          degree=C,
        #          gamma=0.0,
        #          kernel='rbf',
        #          max_iter=-1,
        #          probability=False,
        #          random_state=None,
        #          shrinking=True,
        #          tol=0.001,
        #          verbose=False)

        ##current winner
        ##run svm over the sparse set
        #clf2 = svm.SVC(
        #        kernel='poly',
        #        C=1,
        #        degree=3,
        #        shrinking=False,
        #        gamma=1,
        #        coef0=1)

        #print 'fitting data 1'
        ##clf.fit(X1, results_to_num)
        #print 'fitting data 2'




        #print 'predicting results for sparse'
        #clf2.fit(x_sparse_train, results_to_num)
        #G_train = clf2.predict(x_sparse_train)
        #G_test = clf2.predict(x_sparse_test)

        #train_error = get_error(G_train, y_train)
        #print 'train_error ', train_error

        #tally = 0
        #f = open("output_decision_tree_sparse.csv", "w")
        #f.write('Id,Prediction\n')
        #for i in xrange(len(x_test)):
        #    if G_test[i]==0: tally+=1
        #    f.write('%s,'% (i+1))
        #    f.write('%s\n'% G_test[i])
        #f.close()
        #print 'Sparse classified ', tally/float(len(x_test)), '% as non-recession for C=', C

        #used for linear_model.Lasso
        #f = open("coefs_coef_%s" % C, "w")
        #f.write('%s' % clf.coef_)
        #print('wrote coef file to coefs_coef_%s' % C)
        #f.close()
        #print(clf.intercept_)

        #used for poly svm
        #print 'print(len(clf.dual_coef_))'
        #print(len(clf.dual_coef_))
        #print 'print(len(clf.support_vectors_))'
        #print(len(clf.support_vectors_))



    
if __name__ == '__main__':
    print('using pruned')
    demo('kaggle_train_wc.csv','kaggle_test_wc.csv')
    #demo('dave_train_prune.csv','dave_test_prune.csv')
